#include <iostream>
#include <fstream>
#include "bintree_eda.h"

using namespace std;

int tramosNavegables(const bintree<int>& arb, int& navegables) {
    if (arb.empty()) {
        return 0;
    }
    if (arb.left().empty() && arb.right().empty()) {
        return 1 - arb.root();
    }

    int caudalI = tramosNavegables(arb.left(), navegables);
    int caudalD = tramosNavegables(arb.right(), navegables);
    
    if (caudalI > 2) navegables++;
    if (caudalD > 2) navegables++;

    int caudalAct = caudalI + caudalD - arb.root();

    if (caudalAct < 0)
        caudalAct = 0;

    return caudalAct;
}

// Resuelve un caso de prueba, leyendo de la entrada la
// configuración, y escribiendo la respuesta
void resuelveCaso() {
    bintree<int> arb;
    arb = leerArbol(-1); // -1 es la repr. de arbol vacio
    
    int numNavegables = 0;
    tramosNavegables(arb, numNavegables);

    cout << numNavegables << '\n';

}

int main() {
    // Para la entrada por fichero.
    // Comentar para acepta el reto
#ifndef DOMJUDGE
    std::ifstream in("datos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
#endif

    int numCasos;
    std::cin >> numCasos;
    for (int i = 0; i < numCasos; ++i)
        resuelveCaso();

    // Para restablecer entrada. Comentar para acepta el reto
#ifndef DOMJUDGE // para dejar todo como estaba al principio
    std::cin.rdbuf(cinbuf);
    //system("PAUSE");
#endif

    return 0;
}

