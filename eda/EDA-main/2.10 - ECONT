//Sebastian Sanchez Castelli-Gair
// VJ57


#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>

using namespace std;

// función que resuelve el problema
int resolver(const vector<int>& v, int ini, int fin) {

    int n = fin - ini;


    if (n == 0)
        return ini;
    if (n == 2) {
        if (v[ini + 1] == v[ini])
            return fin;
        return ini;
    }

    if (v[ini] != v[ini + 1]) //SI NO HACES ESTAS COMPROBACIONES DA TIMELIMIT
        return ini;

    if (v[fin] != v[fin - 1])
        return fin;

    int mit = (ini + fin) / 2;

    if (v[mit] != v[mit - 1] && v[mit] != v[mit + 1]) //si es justo el del medio
        return mit;

    if ((n+1) % 4 == 3) { //grupo de 3
        if (v[mit] == v[mit - 1])
            return resolver(v, mit+1, fin);
        return resolver(v, ini, mit-1);
    }

    if (v[mit] == v[mit - 1])
        return  resolver(v, ini, mit);
    return resolver(v, mit, fin);

}

// Resuelve un caso de prueba, leyendo de la entrada la
// configuración, y escribiendo la respuesta
void resuelveCaso() {
    // leer los datos de la entrada
    int i, k;
    cin >> i;
    vector<int> v(i);

    for (int j = 0; j < i; j++)
    {
        cin >> k;
        v[j] = k;
    }


    int sol = resolver(v, 0, i - 1);
    // escribir sol
    cout << sol << '\n';

}

int main() {
    // Para la entrada por fichero.
    // Comentar para acepta el reto
#ifndef DOMJUDGE
    std::ifstream in("datos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
#endif 


    int numCasos;
    std::cin >> numCasos;
    for (int i = 0; i < numCasos; ++i)
        resuelveCaso();


    // Para restablecer entrada. Comentar para acepta el reto
#ifndef DOMJUDGE // para dejar todo como estaba al principio
    std::cin.rdbuf(cinbuf);
    system("PAUSE");
#endif

    return 0;
}
