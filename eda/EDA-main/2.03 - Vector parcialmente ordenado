#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <climits>

using namespace std;

bool resolver(const vector<int>& v, int ini, int fin, int& min, int& max)
{
    int mitad = (ini + fin) / 2;

    if (fin <= ini + 1) 
    { 
        min = v[ini]; 
        max = v[ini];

        return true;
    }

    int minIzq, minDer, maxIzq, maxDer;

    bool izq = resolver(v, ini, mitad, minIzq, maxIzq);
    bool der = resolver(v, mitad, fin, minDer, maxDer);

    if (!izq || !der || minIzq > minDer || maxDer < maxIzq)
        return false;

    min = minIzq; 
    max = maxDer;

    return true;
}
bool resuelveCaso()
{
    int aux = -1, tam = 0;

    vector <int> v;

    while (aux != 0)
    {
        cin >> aux;

        if (aux != 0)
        {
            v.push_back(aux);
            tam++;
        }
    }

    if (tam == 0)
        return false;

    int max = 0; 
    int min = INT_MAX;

    if (resolver(v, 0, tam, min, max))
        cout << "SI\n";
    else
        cout << "NO\n";

    return true;
}

int main() {
    // Para la entrada por fichero.
    // Comentar para acepta el reto
#ifndef DOMJUDGE
    std::ifstream in("datos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
#endif 

    while (resuelveCaso());


    // Para restablecer entrada. Comentar para acepta el reto
#ifndef DOMJUDGE // para dejar todo como estaba al principio
    std::cin.rdbuf(cinbuf);
    system("PAUSE");
#endif

    return 0;
}
