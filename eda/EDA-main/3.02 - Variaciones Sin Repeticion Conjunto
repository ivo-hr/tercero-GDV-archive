// Sebastian Sanchez Castelli-Gair
// VJ57


#include <iostream>
#include <iomanip>
#include <fstream>
#include <vector>

using namespace std;

void procesaSolucion(const vector<char>& datos) {
    for (auto i : datos) {
        cout << i;
    }
    cout << '\n';
}

bool valida(const vector<char>& v, int k) {
    for (int i = 0; i < k; ++i)
        if (v[i] == v[k])
            return false;
    return true;
}

// función que resuelve el problema
void resolver(vector<char> v, int k, int m, int n, int c) {
    
    for (int i = c; i < c + m; ++i) {
        v[k] = i;
        bool esValida = valida(v, k);
        if (esValida && k == n - 1)
            procesaSolucion(v);
        else if(esValida)
            resolver(v, k + 1, m, n, c);

    }
    
}

// Resuelve un caso de prueba, leyendo de la entrada la
// configuración, y escribiendo la respuesta
bool resuelveCaso() {
    // leer los datos de la entrada
    int m, n;

    cin >> m >> n;

    if (! std::cin)
        return false;

    char c = 'a';
    vector<char> v(n);
    
    resolver(v, 0, m, n, c);
    
    // escribir sol
    cout << '\n';
    
    return true;
    
}

int main() {
    // Para la entrada por fichero.
    // Comentar para acepta el reto
#ifndef DOMJUDGE
    std::ifstream in("datos.txt");
    auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
#endif

    while (resuelveCaso())
        ;


    // Para restablecer entrada. Comentar para acepta el reto
#ifndef DOMJUDGE // para dejar todo como estaba al principio
    std::cin.rdbuf(cinbuf);
    //system("PAUSE");
#endif

    return 0;
}
