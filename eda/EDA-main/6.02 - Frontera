////Sebastian Sanchez Castelli-Gair
////VJ57
//
//
//#include <iostream>
//#include <iomanip>
//#include <fstream>
//#include "bintree_eda.h"
//#include <vector>
//
//using namespace std;
//
//// función que resuelve el problema
//void resolver(const bintree<int>& a, vector<int>& sol) {
//    
//    if (a.empty())
//        return;
//
//    if (a.left().empty() && a.right().empty()) {
//        sol.push_back(a.root());
//        return;
//    }
//
//    resolver(a.left(), sol);
//    resolver(a.right(), sol);
//
//    return;
//    
//}
//
//// Resuelve un caso de prueba, leyendo de la entrada la
//// configuración, y escribiendo la respuesta
//void resuelveCaso() {
//    // leer los datos de la entrada
//    bintree<int> arbol;
//    arbol = leerArbol(-1);
//    
//    vector<int> sol;
//    resolver(arbol, sol);
//    // escribir sol
//    for (auto i : sol) {
//        cout << i << ' ';
//    }
//
//    cout << '\n';
//}
//
//int main() {
//    // Para la entrada por fichero.
//    // Comentar para acepta el reto
//    #ifndef DOMJUDGE
//     std::ifstream in("datos.txt");
//     auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
//     #endif 
//    
//    
//    int numCasos;
//    std::cin >> numCasos;
//    for (int i = 0; i < numCasos; ++i)
//        resuelveCaso();
//
//    
//    // Para restablecer entrada. Comentar para acepta el reto
//     #ifndef DOMJUDGE // para dejar todo como estaba al principio
//     std::cin.rdbuf(cinbuf);
//     system("PAUSE");
//     #endif
//    
//    return 0;
//}
