////Sebastian Sanchez Castelli-Gair
////VJ57
//
//
//#include <iostream>
//#include <iomanip>
//#include <fstream>
//#include "bintree_eda.h"
//
//using namespace std;
//
//struct Sol {
//    int nodos;
//    int hojas;
//    int altura;
//};
//// función que resuelve el problema
//Sol resolver(const bintree<char>& b, int altura) {
//
//    if (b.empty())
//        return { 0, 0, altura - 1};
//    if(b.left().empty() && b.right().empty())
//        return { 1, 1, altura };
//
//
//    Sol sol; sol.altura = sol.hojas = sol.nodos = 0;
//
//    Sol aux = resolver(b.left(), altura + 1);
//    Sol aux2 = resolver(b.right(), altura + 1);
//
//    sol.altura = max(aux.altura, aux2.altura);
//    sol.hojas = aux.hojas + aux2.hojas;
//    sol.nodos = aux.nodos + aux2.nodos + 1;
//
//    return sol;
//}
//
//// Resuelve un caso de prueba, leyendo de la entrada la
//// configuración, y escribiendo la respuesta
//void resuelveCaso() {
//    // leer los datos de la entrada
//    char c;
//    bintree<char> b;
//
//    b = leerArbol('.');
//
//    //int nodos, hojas, altura;
//    
//    Sol sol = resolver(b, 1);
//    // escribir sol
//    cout << sol.nodos << ' ' << sol.hojas << ' ' << sol.altura << '\n';
//    
//}
//
//int main() {
//    // Para la entrada por fichero.
//    // Comentar para acepta el reto
//    #ifndef DOMJUDGE
//     std::ifstream in("datos.txt");
//     auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
//     #endif 
//    
//    
//    int numCasos;
//    std::cin >> numCasos;
//    for (int i = 0; i < numCasos; ++i)
//        resuelveCaso();
//
//    
//    // Para restablecer entrada. Comentar para acepta el reto
//     #ifndef DOMJUDGE // para dejar todo como estaba al principio
//     std::cin.rdbuf(cinbuf);
//     system("PAUSE");
//     #endif
//    
//    return 0;
//}
